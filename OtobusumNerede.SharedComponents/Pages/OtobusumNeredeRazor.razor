@page "/OtobusumNerede"
@using OtobusumNerede.Shared.Services.Interfaces
@using OtobusumNerede.Shared.ServicesDataModels

@inject IGetHatlarApi _getHatlarApi
@inject IGetHatDurakApi _getHatDurakApi
@inject IGetHatOtobusApi _getHatOtobusApi
@inject IGetSeferSaatleriApi _getSeferSaatleriApi
@inject ILocalStorageService _localStorage
@inject IHatOtobusServices _hatOtobusServices
@inject IKonumServices _konumServices
@inject IUyariServices _uyariServices
@inject ICihazServices _cihazServices
@inject IIzinServices _izinServices



<div class="justify-content-center align-items-center text-center mt-4">
	<h3 class="mx-3">Otobusum Nerede</h3>

	<div class="row mb-3 m-2">
		@if (isBusy)
		{
			<IsBusyComponent />
		}
		else
		{
			@if (Konum != null)
			{
				<h3>
					Konum : @Konum.Longitude, @Konum.Latitude
				</h3>
			}
			else
			{
				<h3>
					Konum Bilgisi Alınamadı
				</h3>
			}

			<hr />
			<div class="col-md-12 my-4">
				<AutoCompleteComponent TItem="HatDto"
									   Items="HatlarDto"
									   Placeholder="@(SecilenHat != null ? SecilenHat.HatKodu : "Hat Kodunu Giriniz")"
									   DisplayProperty="@(x => x.HatKodu)"
									   OnItemSelected="SecilenHatiGetir" />

				@if (!seferVarMi)
				{
					<h2 class="col-md-12 my-4 align-items-center alert alert-danger" role="alert">
						Sefer Bulunamadı
					</h2>
				}
				else
				{
					if (SecilenHat != null)
					{
						<h3 class="mx-3 my-4">@SecilenHat.HatKoduAdi</h3>
						<hr />
					}
					<div class="col-md-12 my-4 align-items-center">
						@* 									<div id="map" class="w-100 mx-auto"></div>
 *@
						<div id="map" style="height: 60vh; width: 95vw; margin: 0 auto;" class="w-100 mx-auto"></div>
					</div>
					@* 					<div class="d-flex justify-content-center">
						<div id="map" class="w-100 mx-auto"></div>
					</div> *@
				}

			</div>

		}
	</div>
</div>


@code {
	private Timer _timer;
	private HatDto SecilenHat;
	private List<HatDto> HatlarDto = new();
	private List<HatDurakDto> HatlarDuraklarDto = new();
	private List<HatOtobusDto> HatlarOtobuslerDto = new();
	private List<string> GuzargahKoordinatlari { get; set; } = new();
	private List<object> GeoJsonListesi { get; set; } = new();
	private List<GetHatOtoKonumJsonResultServiceModel> JsonOtobusKonumlari { get; set; } = new();
	private bool seferVarMi { get; set; } = true;
	private bool isBusy { get; set; } = true;
	private KonumResult KonumSonucu { get; set; }
	private Location Konum { get; set; }


	protected override async Task OnInitializedAsync()
	{
		HatlarDto = await _getHatlarApi.GetHatlarDtoAsync();
		KonumSonucu = await _konumServices.KonumBilgisiniAlAsync();
		Konum = KonumSonucu.Konum;
		isBusy = false;
	}

	private async Task SecilenHatiGetir(HatDto hat)
	{
		SecilenHat = hat;
		await HatDegisti(hat);
	}

	private async Task HatDegisti(HatDto hat)
	{
		seferVarMi = true;
		isBusy = true;
		HatlarDuraklarDto = await _getHatDurakApi.GetHatDurakById(hat.HatKodu);
		JsonOtobusKonumlari = await _hatOtobusServices.HatOtobusBilgileriAsync(hat.HatKodu);

		if (JsonOtobusKonumlari.Count == 0)
		{
			seferVarMi = false;
			isBusy = false;
			await InvokeAsync(StateHasChanged);
			return;
		}

		HatlarOtobuslerDto = await _getHatOtobusApi.HatOtobusBilgileriAsync(JsonOtobusKonumlari);

		GunlerEnum gun = GetGunlerEnum();
		GuzargahKoordinatlari = GuzergahKodlariniGetir(HatlarOtobuslerDto);
		GeoJsonListesi = await _getHatOtobusApi.GuzergahBilgileriAsync(GuzargahKoordinatlari);
		isBusy = false;

		await InvokeAsync(StateHasChanged); // Ensure the UI is updated before rendering the map
		await JS.InvokeVoidAsync("renderMap", HatlarDuraklarDto, HatlarOtobuslerDto, GeoJsonListesi);

		if (_timer != null)
			_timer.Dispose();
		_timer = new Timer(async _ => await UpdateOtobusKonumlari(), null, 40000, 40000);

	}

	private List<string> GuzergahKodlariniGetir(List<HatOtobusDto> HatlarOtobuslerDto)
	{
		if (GuzargahKoordinatlari.Count > 0)
			GuzargahKoordinatlari.Clear();
		foreach (var hatOtobus in HatlarOtobuslerDto)
		{
			if (!GuzargahKoordinatlari.Contains(hatOtobus.GuzergahKodu))
				GuzargahKoordinatlari.Add(hatOtobus.GuzergahKodu);
		}
		foreach (var hatOtobus in HatlarOtobuslerDto)
		{
			if (!GuzargahKoordinatlari.Contains(hatOtobus.GuzergahKodu))
				GuzargahKoordinatlari.Add(hatOtobus.GuzergahKodu);
		}
		return GuzargahKoordinatlari;
	}


	private GunlerEnum GetGunlerEnum()
	{
		var gun = DateTime.Now.DayOfWeek;

		switch (gun)
		{
			case DayOfWeek.Monday:
				return GunlerEnum.HaftaIci;
			case DayOfWeek.Tuesday:
				return GunlerEnum.HaftaIci;
			case DayOfWeek.Wednesday:
				return GunlerEnum.HaftaIci;
			case DayOfWeek.Thursday:
				return GunlerEnum.HaftaIci;
			case DayOfWeek.Friday:
				return GunlerEnum.HaftaIci;
			case DayOfWeek.Saturday:
				return GunlerEnum.Cumartesi;
			case DayOfWeek.Sunday:
				return GunlerEnum.Pazar;
			default:
				return GunlerEnum.Pazar;
		}
	}

	private async Task UpdateOtobusKonumlari()
	{
		JsonOtobusKonumlari = await _hatOtobusServices.HatOtobusBilgileriAsync(SecilenHat.HatKodu);

		HatlarOtobuslerDto = await _getHatOtobusApi.HatOtobusBilgileriAsync(JsonOtobusKonumlari);

		await JS.InvokeVoidAsync("updateBusPositions", HatlarDuraklarDto, HatlarOtobuslerDto, HatlarOtobuslerDto);
	}

	private async Task<Location> UpdateKullaniciKonumu()
	{
		KonumSonucu = await _konumServices.KonumBilgisiniAlAsync();
		Konum = KonumSonucu.Konum;
		await InvokeAsync(StateHasChanged);
		return Konum; 
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && HatlarDuraklarDto.Any())
		{
			await JS.InvokeVoidAsync("renderMap", HatlarDuraklarDto, HatlarOtobuslerDto, HatlarOtobuslerDto);
		}
	}
}

@inject IJSRuntime JS

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />

<script>
		// Haritayı ve işaretçileri tutmak için global değişkenler
	let map;
	let busMarkers = [];
	let routeLayers = []; // Rota katmanlarını saklamak için

	window.renderMap = (duraklar, otobusler, rotalar) => {
		const mapContainer = document.getElementById('map');

		if (mapContainer && !mapContainer._leaflet_map) {
			// Haritayı oluştur
			map = L.map('map').setView([40.954977, 29.094129], 13); // Başlangıç merkezi

			L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
				attribution: '&copy; OpenStreetMap contributors'
			}).addTo(map);

			// Kullanıcının konumunu bulma
			map.locate({ setView: true, maxZoom: 22 });

			// Kullanıcı konumu alındığında yapılacak işlemler
			map.on('locationfound', function (e) {
				map.setView(e.latlng, 16); // Kullanıcının konumuna odaklan
				L.marker(e.latlng) // Kullanıcı konumu marker'ı
					.bindPopup("Buradasınız!")
					.addTo(map);
			});

			// Kullanıcı konumu bulunamadığında yapılacak işlemler
			map.on('locationerror', function (e) {
				alert("Konum alınamadı. Lütfen konum erişimine izin verin.");
			});

			// Durak ikonları
			const durakIcon1 = L.icon({
				iconUrl: '/icons/busStationBlue_2.svg',  // Sefer Yönü 1 için ikon
				iconSize: [32, 32],
				iconAnchor: [16, 32],
				popupAnchor: [0, -32]
			});

			const durakIcon2 = L.icon({
				iconUrl: '/icons/busStationRed_2.svg',  // Sefer Yönü 0 için ikon
				iconSize: [32, 32],
				iconAnchor: [16, 32],
				popupAnchor: [0, -32]
			});

			// Otobüs ikonu
			const busIcon = L.icon({
				iconUrl: '/icons/busIcon.png',
				iconSize: [48, 48],
				iconAnchor: [16, 32],
				popupAnchor: [0, -32]
			});

			// Durakları haritaya ekle
			duraklar.forEach(durak => {
				const chosenIcon = durak.seferYonu === 1 ? durakIcon1 : durakIcon2;
				L.marker([durak.enlem, durak.boylam], { icon: chosenIcon })
					.bindPopup(`<b>${durak.durakAdi}</b>`)
					.addTo(map);
			});

			// Daha önce eklenen rotaları temizleme
			if (routeLayers) {
				routeLayers.forEach(layer => map.removeLayer(layer));
			}
			routeLayers = [];

			rotalar.forEach(rota => {
				// Renk belirleme fonksiyonu
				const getColor = (yon, deparNo) => {

					if(deparNo!==0 && yon==="DÖNÜŞ"){
						return "yellow"
					}else if(deparNo!==0 && yon === "GİDİŞ"){
						return "green";
					}else if(yon === "DÖNÜŞ"){
						return "red";
					}
					else if (yon === "GİDİŞ") {
						return "blue";
					}
					else{
						return "pink";
					}
				};

				// Rota rengini belirle
				const color = getColor(rota.properties.yon, rota.properties.deparNo);

				// GeoJSON katmanını oluştur ve haritaya ekle
				const geoJsonLayer = L.geoJSON(rota, {
					style: {
						color: color,    // Belirlenen renk
						weight: 4,       // Çizgi kalınlığı
						opacity: 0.8     // Saydamlık
					}
				}).addTo(map);

				// Rotaları saklama (sonradan silmek için)
				routeLayers.push(geoJsonLayer);
			});


			// Otobüsleri haritaya ekle
			otobusler.forEach(otobus => {
				const date = new Date(otobus.konumZamani);
				const hours = String(date.getHours()).padStart(2, '0');
				const minutes = String(date.getMinutes()).padStart(2, '0');
				const seconds = String(date.getSeconds()).padStart(2, '0');
				const day = String(date.getDate()).padStart(2, '0');
				const month = String(date.getMonth() + 1).padStart(2, '0');
				const year = date.getFullYear();

				const formattedDateTime = `Son Konum Saati ${hours}:${minutes}:${seconds} ${day}/${month}/${year}`;

				const otobusMarker = L.marker([otobus.enlem, otobus.boylam], { icon: busIcon })
					.bindPopup(`<b>${formattedDateTime}</b>`)
					.addTo(map);

				busMarkers.push(otobusMarker);
			});
		}
	};

	// Otobüs konumlarını güncelle
	window.updateBusPositions = (duraklar, otobusler) => {
		// Eski otobüs işaretçilerini kaldır
		busMarkers.forEach(marker => map.removeLayer(marker));
		busMarkers = [];

		// Yeni otobüs işaretçilerini ekle
		const busIcon = L.icon({
			iconUrl: '/icons/busIcon.png',
			iconSize: [48, 48],
			iconAnchor: [16, 32],
			popupAnchor: [0, -32]
		});

		otobusler.forEach(otobus => {
			const date = new Date(otobus.konumZamani);
			const hours = String(date.getHours()).padStart(2, '0');
			const minutes = String(date.getMinutes()).padStart(2, '0');
			const seconds = String(date.getSeconds()).padStart(2, '0');
			const day = String(date.getDate()).padStart(2, '0');
			const month = String(date.getMonth() + 1).padStart(2, '0');
			const year = date.getFullYear();

			const formattedDateTime = `Son Konum Saati ${hours}:${minutes}:${seconds} ${day}/${month}/${year}`;

			const otobusMarker = L.marker([otobus.enlem, otobus.boylam], { icon: busIcon })
				.bindPopup(`<b>${formattedDateTime}</b>`)
				.addTo(map);

			busMarkers.push(otobusMarker);
		});
	};
</script>

