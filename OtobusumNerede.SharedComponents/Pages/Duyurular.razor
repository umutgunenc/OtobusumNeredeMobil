@page "/Duyurular"



@inject IGetDuyurularApi _getDuyurularApi
@inject IGetHatlarApi _getHatlarApi
@inject ILocalStorageService _localStorage

<div class="justify-content-center align-items-center text-center">
	<h3 class="">Duyurular</h3>

	<div class="row mb-3">
		@if (isBusy)
		{
			<IsBusyComponent />
		}
		else
		{
			<div class="col">

				<div class="my-3">

					<AutoCompleteComponent TItem="HatDto"
										   Items="HatlarListesi"
										   SelectedItem="SecilenHat"
										   SelectedItemChanged="SecilenHatiGetir"
										   StaticPlaceholder="Hat Kodunu Giriniz"
										   DisplayProperty="@(x => x.HatKoduAdi)">
					</AutoCompleteComponent>

				</div>
				@if (DuyurularListesi.Count == 0)
				{
					<h3 class="mx-3">Duyuru Bulunamadı</h3>
				}
				else
				{
					@foreach (var duyuru in DuyurularListesi)
					{
						<div class="row">
							<div class="col-md-12 mb-3">
								<div class="card text-bg-warning">
									<div class="card-body">
										<h5 class="card-title">@duyuru.DuyuruBasligi</h5>
										<p class="card-text">Duyuru Tipi : @duyuru.DuyuruTipi</p>
										<p class="card-text">Duyuru Saati : @duyuru.DuyuruSaati</p>
										<button @onclick="() => OpenModal(duyuru)" class="btn btn-primary">Duyuru Gör</button>
									</div>
								</div>
							</div>
						</div>
					}
				}
			</div>
		}
	</div>
</div>

<!-- Modal Component -->
<ModalComponent @ref="modal" Title="Duyuru Detayı">
	<ModalBody>
		<div class="text-start">
			<p><strong>@secilenDuyuru?.DuyuruBasligi</strong></p>
		</div>		
		<div class="text-start">
			<p>
				<strong>Duyuru Tipi:</strong> 
				<span class="text-white-50">@secilenDuyuru?.DuyuruTipi</span>
			</p>
		</div>	
		<div class="text-start">
			<p>
				<strong>Duyuru Saati:</strong>
				<span class="text-white-50"> @secilenDuyuru?.DuyuruSaati</span>
			</p>
		</div>	
		<div class="text-start">
			<span class="text-white-50"> @secilenDuyuru?.DuyuruMesaji</span>
		</div>
	</ModalBody>
	<hr />
	<ModalFooter>
		<div class="d-grid">
			<button @onclick="CloseModal" class="btn btn-secondary">Kapat</button>
		</div>
	</ModalFooter>
</ModalComponent>

@code {

	private bool isBusy = true;
	private List<DuyurularDto> DuyurularListesi { get; set; } = new List<DuyurularDto>();
	private DuyurularDto secilenDuyuru;
	private List<HatDto> HatlarListesi { get; set; } = new List<HatDto>();
	private HatDto SecilenHat { get; set; } = null;
	private ModalComponent modal;

	protected override async Task OnInitializedAsync()
	{
		DuyurularListesi = await _getDuyurularApi.GetDuyurularAsync();
		HatlarListesi = await _getHatlarApi.GetHatlarDtoAsync();
		HatlarListesi.Insert(0, new HatDto { HatKodu = "", HatKoduAdi = "Hepsini Göster" });
		isBusy = false;
	}

	private void OpenModal(DuyurularDto duyuru)
	{
		secilenDuyuru = duyuru;
		modal.Open();
	}

	private void CloseModal()
	{
		modal.Close();
	}

	private async Task SecilenHatiGetir(HatDto hat)
	{
		SecilenHat = hat;
		await HatDegisti(hat);
	}

	private async Task HatDegisti(HatDto hat)
	{
		isBusy = true;
		var secilenHat = hat.HatKodu;
		DuyurularListesi = await _getDuyurularApi.GetDuyurularAsync();

		SecilenHat = HatlarListesi.FirstOrDefault(x => x.HatKodu == secilenHat);
		if (SecilenHat != null)
		{
			DuyurularListesi = DuyurularListesi
				.Where(x => x.DuyuruBasligi
						.Split(" /")
						.First()
						.Equals(secilenHat))
				.ToList();

			SecilenHat = HatlarListesi.FirstOrDefault(x => x.HatKodu == secilenHat);
		}
		else
		{

			SecilenHat = null;
		}
		isBusy = false;
	}
}