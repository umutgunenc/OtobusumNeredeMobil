@page "/SeferSaatleri"


@inject IGetHatlarApi _getHatlarApi
@inject IGetSeferSaatleriApi _getSeferSaatleriApi


	<h3 class="fw-bold pt-3" style="color:#4CAF50">Sefer Saatleri</h3>

	<div class="row mb-3 m-2">
		@if (isBusy)
		{
			<IsBusyComponent />
		}
		else
		{


			<div class="col-md-12 my-4">

			<AutoCompleteComponent TItem="HatDto"
								   Items="HatlarDto"
								   SelectedItem="SecilenHat"
								   SelectedItemChanged="HatSecildi"
								   StaticPlaceholder="Hat Kodunu Giriniz"
								   DisplayProperty="@(x => x.HatKoduAdi)">
			</AutoCompleteComponent>


			</div>
			@if (SecilenHat!=null)
			{

				<div class="col-md-12 my-4">
					<select class="form-control" @onchange="GunSecildi">
						@if (!gunSecildiMi)
						{
							<option value="" disabled selected>Gün Seçiniz</option>
						}
						else
						{
							<option value="" disabled>Gün Seçiniz</option>
						}

						@foreach (var gun in Enum.GetValues(typeof(GunlerEnum)).Cast<GunlerEnum>())
						{

							<option value="@gun">@GetGunAdi(gun)</option>
						}
					</select>
				</div>
			}
			if (showTable)
			{
				if (SeferSaatleriListesi.GidisSeferleri.Count == 0 && SeferSaatleriListesi.DonusSeferleri.Count == 0)
				{
				<h3 class="fw-bold pt-3" style="color:#4CAF50">Aranılan Güzergahta Sefer Bulunamadı</h3>
				}
				else
				{
					<div class="table-container p-2 my-3" style="position:absolute">
					<table class="table table-info table-hover table-bordered">
							<thead class="thead-dark">
								<tr>
									<th colspan="4" class="text-center">
										@SeferSaatleriListesi.GidisSeferleri.FirstOrDefault().HatAdi
									</th>
								</tr>

							</thead>
							<thead class="thead-dark">
								<tr>
									<th colspan="2" class="text-center">
										Gidiş
									</th>
									<th colspan="2" class="text-center">
										Dönüş
									</th>
								</tr>

							</thead>
							<thead class="thead-dark">
								<tr>
									<th class="text-center">
										Başlangıç Durağı
									</th>
									<th class="text-center">
										Sefer Saati
									</th>
									<th class="text-center">
										Başlangıç Durağı
									</th>
									<th class="text-center">
										Sefer Saati
									</th>
								</tr>

							</thead>
							<tbody>
								@for (int i = 0; i < Math.Max(SeferSaatleriListesi.GidisSeferleri.Count, SeferSaatleriListesi.DonusSeferleri.Count); i++)
								{
									<tr>
										<td class="text-center p-3 col-3">
											@if (i < SeferSaatleriListesi.GidisSeferleri.Count)
											{
												@SeferSaatleriListesi.GidisSeferleri[i].BaslangıcDuragi
											}
											else
											{
											}
										</td>
										<td class="text-center p-3 col-3">
											@if (i < SeferSaatleriListesi.GidisSeferleri.Count)
											{
												@SeferSaatleriListesi.GidisSeferleri[i].SeferSaati
											}
											else
											{
											}
										</td>
										<td class="text-center p-3 col-3">
											@if (i < SeferSaatleriListesi.DonusSeferleri.Count)
											{
												@SeferSaatleriListesi.DonusSeferleri[i].BaslangıcDuragi
											}
											else
											{
											}
										</td>
										<td class="text-center p-3 col-3">
											@if (i < SeferSaatleriListesi.DonusSeferleri.Count)
											{
												@SeferSaatleriListesi.DonusSeferleri[i].SeferSaati
											}
											else
											{
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			}
		}
	</div>




@code {

	private bool gunSecildiMi = false;
	private HatDto SecilenHat;
	private bool isBusy { get; set; } = true;
	private bool showTable = false;

	private List<GunlerEnum> Gunler = Enum
								.GetValues(typeof(GunlerEnum))
								.Cast<GunlerEnum>()
								.ToList();

	private SeferListeleriDto SeferSaatleriListesi = new();
	private List<HatDto> HatlarDto = new();


	protected override async Task OnInitializedAsync()
	{
		HatlarDto = await _getHatlarApi.GetHatlarDtoAsync();
		isBusy = false;
	}

	private async Task HatSecildi(HatDto hat)
	{
		showTable = false;
		gunSecildiMi = false;
		SecilenHat = hat;
	}
	private async Task<bool> GunSecildi(ChangeEventArgs e)
	{
		isBusy = true;
		Enum.TryParse<GunlerEnum>(e.Value?.ToString(), out var secilenGun);
		SeferSaatleriListesi = await _getSeferSaatleriApi.GetSeferSaatiByIdAsync(SecilenHat.HatKodu, secilenGun);
		showTable = true;
		isBusy = false;
		return gunSecildiMi = true;

	}

	private string GetGunAdi(GunlerEnum gun)
	{
		string GunAdi;
		switch (gun)
		{
			case GunlerEnum.HaftaIci:
				GunAdi = "Hafta İçi";
				break;
			case GunlerEnum.Cumartesi:
				GunAdi = "Cumartesi";
				break;
			case GunlerEnum.Pazar:
				GunAdi = "Pazar";
				break;
			default:
				GunAdi = gun.ToString();
				break;
		}
		return GunAdi;

	}

}
